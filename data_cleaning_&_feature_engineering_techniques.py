# -*- coding: utf-8 -*-
"""Data Cleaning & Feature Engineering Techniques.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g_CJCbXb-NWaBOkbbH7PSB3PAF582D3Q
"""

# -------------------------------
# 1) Import Libraries
# -------------------------------
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA

# -------------------------------
# 2) Load Dataset
# -------------------------------
df = pd.read_csv("/content/drive/MyDrive/train_data.csv")
print("Dataset Shape:", df.shape)
df.head()

# -------------------------------
# 3) Data Info & Missing Values
# -------------------------------
df.info()
df.describe(include="all")

# Missing values summary
print("\nMissing Values:")
print(df.isnull().sum())

# Visualize missingness
sns.heatmap(df.isnull(), cbar=False, cmap="viridis")
plt.title("Missing Values Heatmap")
plt.show()

# -------------------------------
# 4) Data Cleaning (Error-proof)
# -------------------------------

# Remove duplicates (safe)
df.drop_duplicates(inplace=True)

# Fix Survived datatype if exists
if 'Survived' in df.columns:
    df['Survived'] = df['Survived'].astype(int)

# Fix PassengerId datatype if exists
if 'PassengerId' in df.columns:
    df['PassengerId'] = df['PassengerId'].astype(int)

# Handle Missing Values
if 'Age' in df.columns:
    df['Age'].fillna(df['Age'].median(), inplace=True)

if 'Embarked' in df.columns:
    df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)

# Drop Cabin only if it exists
if 'Cabin' in df.columns:
    df.drop(columns=['Cabin'], inplace=True)

print("✅ Data Cleaning Completed")
print("Current Columns:", df.columns.tolist())

# -------------------------------
# 5) Handle Outliers (IQR Method on Fare)
# -------------------------------
Q1 = df['Fare'].quantile(0.25)
Q3 = df['Fare'].quantile(0.75)
IQR = Q3 - Q1

lower = Q1 - 1.5 * IQR
upper = Q3 + 1.5 * IQR

df = df[(df['Fare'] >= lower) & (df['Fare'] <= upper)]
print("After removing outliers:", df.shape)

# -------------------------------
# 6) Feature Engineering (Error-proof)
# -------------------------------

# 1. Extract Title from Name (agar Name column hai)
if 'Name' in df.columns:
    df['Title'] = df['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)
else:
    df['Title'] = 'Unknown'

# 2. Family Size (agar SibSp & Parch hain)
if 'SibSp' in df.columns and 'Parch' in df.columns:
    df['FamilySize'] = df['SibSp'] + df['Parch'] + 1
else:
    df['FamilySize'] = 1  # fallback

# 3. IsAlone
df['IsAlone'] = (df['FamilySize'] == 1).astype(int)

# 4. Encode categorical variables safely
from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()

if 'Sex' in df.columns:
    df['Sex'] = label.fit_transform(df['Sex'].astype(str))

if 'Embarked' in df.columns:
    df['Embarked'] = label.fit_transform(df['Embarked'].astype(str))

if 'Title' in df.columns:
    df['Title'] = label.fit_transform(df['Title'].astype(str))

# 5. Scale numerical features (only if they exist)
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

for col in ['Age', 'Fare', 'FamilySize']:
    if col in df.columns:
        df[[col]] = scaler.fit_transform(df[[col]])

# -------------------------------
# 7) Dimensionality Reduction (Optional PCA)
# -------------------------------
pca = PCA(n_components=2)
pca_features = pca.fit_transform(df[['Age','Fare','FamilySize']])
df['PCA1'] = pca_features[:,0]
df['PCA2'] = pca_features[:,1]

# -------------------------------
# 8) Dataset Splitting
# -------------------------------

# Pehle dekhte hain target column kaunsa hai
print("Available Columns:", df.columns.tolist())

# Agar Titanic dataset hai to target "Survived" hota hai
if 'Survived' in df.columns:
    y = df['Survived']
    X = df.drop(columns=[col for col in ['Survived','Name','Ticket','PassengerId'] if col in df.columns])
else:
    # Agar target "Survived" nahi hai, fallback: last column ko target bana lo
    y = df.iloc[:, -1]
    X = df.iloc[:, :-1]

print("Features shape:", X.shape)
print("Target shape:", y.shape)

# Split into train/test (80/20)
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y if len(y.unique())>1 else None
)

print("Train set:", X_train.shape, "Test set:", X_test.shape)

# -------------------------------
# 9) Save Final Cleaned Data
# -------------------------------
df.to_csv("/content/drive/MyDrive/cleaned_titanic.csv", index=False)
print("✅ Cleaned dataset saved at: /content/drive/MyDrive/cleaned_titanic.csv")